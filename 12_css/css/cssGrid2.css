html, body {
            margin: 20px;
            height: calc(100% - 40px);
            background-color: lightgray;
        }
        
div {
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 30px;
    border: solid 5px dodgerblue;
    background: #fff;
}

/*! Comentário antes desta aula: */
/*todos -> Fala pessoal! Na aula a seguir, algumas propriedades CSS serão utilizadas, incluindo essas três: gridcolumn-gap (nova: column-gap), grid-row-gap (nova: row-gap) ou grid-gap (nova: gap).
Recentemente, no entanto, o uso delas se tornou obsoleto, o que pode gerar o aviso Property is obsolete. Avoid using it (propriedade obsoleta. Evite usá-la).
Para solucionar isso, basta, em vez de utilizar grid-column-gap, usar column-gap. E, em vez de grid-row-gap, usar row-gap. E, em vez de grid-gap, usar gap. Em outras palavras, basta remover o prefixo grid- que funcionarão como esperado.

Bons estudos. */

body{
    display: grid;
    /*? podemos nomear as linhas entre colunas da seguinte forma: */
    grid-template-columns: [inicio] 1fr [metade-1 meio-1] 1fr [metade-2 meio-2] 1fr [fim]; /* 'metade-1 meio-1', nesse caso, são dois nomes alternativos para a mesma linha */
    grid-template-rows: repeat(3, 1fr);

    /*? vamos aplicar gaps */
    column-gap: 20px; /*espaçamento (margin) entre colunas*/
    row-gap: 20px; /*espaçamento (margin) entre linhas*/
    gap: 50px 10px; /*50px de gap nas linhas e 10px nas colunas*/
}

.d1{
    grid-column-start: metade-2; /*estou referencunado a linha nomeada no pai (grid) onde este elemento está*/
    grid-column-end: fim;
    grid-column: meio-1 / fim; /*estou usando grid-column para especificar tanto o inicio quanto o fim*/
    grid-row: 1 / span 2;

    /*? podemos utilizar a propriedade grid-area para definir os termos da seguinte forme (row-start column-start row-end column-end) */
    grid-area: 1 / meio-1 / span 3 / fim;
}